---
bibliography: ../bib/refs.bib
csl: ../bib/biological-reviews.csl
format:
  docx:
    reference-doc: ../bib/template.docx
    output-file: "results.docx"
editor_options: 
  chunk_output_type: console
execute:
  freeze: auto  # re-render only when source changes
  cache: false
  echo: false
  warning: false
  error: false
  include: true
crossref:
  fig-title: 'Figure'
  fig-labels: arabic
  title-delim: "-"
  fig-prefix: "Figure"
  tbl-prefix: "Table"
editor: 
  markdown: 
    wrap: 72
---


```{r, loadpacks}
#| label: loadpacks
#| echo: false
#| warning: false
#| error: false

## Loading some important packages. For first time use, unannotate and install the two packages first
	source(here::here("R", "func.R"))
  check_and_install(c("pacman"))
	pacman::p_load(tidyverse, flextable, latex2exp, metafor, orchaRd, readxl, ape, phytools,here, brms, ggrepel, patchwork, magick, ggtree, equatags, rotl)

# Load the processed data. Keep object as list to hopefully make code more readable. 
         path <- here("output", "data")
        files <- list.files(here("output", "data"))
	 data_lists <- lapply(paste0(path, "/", files), function(x) read.csv(x))
    names(data_lists) <- files

# Bring in the phylogeny 
  phylo <- read.tree(here("output", "phylo", "phylo_pruned_species.nwk"))

# Set digits
  options(digits = 2)
```

# Methods
### *Effect size*

To quantify the impacts of developmental stress on mitochondrial function we calculated the standardized mean difference, assuming heteroscedastic population variances ($SMD_{H}$) [@Bonett2008; @Bonett2009] along with its associated sampling error. We used the *escalc* function of the *metafor* package (vers. `r utils::packageVersion("metafor")`) [@Viechtbauer2010-fn] in R (vers. `r paste0(R.Version()$major, ".", R.Version()$minor)`) which implements a correction to account for possible bias resulting from effect sizes calculated with small sample sizes [@Borenstein2009]. We choose to use $SMD_{H}$ as our effect size because our data: 1) contained substantial amounts of ratio data (e.g., respiratory control ratios, RCR, relative gene expression) which makes interpretation with alternative effect size measures, such as log response ratio, challenging; 2) percentages and zero measurement variables and 3) skewed measurement variables. $SMD_{H}$ is more robust to these types of measurement variables.  

Given the diversity of measurement variables we paid particular attention to effect size direction to ensure that positive increase of means all represent increased in mitochondrial function. ONDI ELABORATES AND TABLE

We calculated $SMD_{H}$ as the mean difference between control and treatment groups divided by the pooled standard deviation. As such, positive effect sizes represent situations where the mean of the experimental group was larger than the control group. Again, we corrected the direction of effect size (multiplied by -1) to ensure their interpretation remained consistent with respect to mitochondrial function.

### *Meta-Analysis*

We analysed our data using multilevel meta-analytic (MLMA) and meta-regression (MLMR) models in R  using *metafor* [vers. `r utils::packageVersion("metafor")` @Viechtbauer2010-fn]. Meta-analytic mean estimates and meta-regression models were plotted using orchard plots which convey overall meta-analytic means, alongside raw effect sizes and prediction intervals, which describe effect heterogeneity [vers. 2.0, @Nakagawa2021-ls; @nakagawaorchard]. 

#### *Multi-level Meta-analysis (MLMA) Models*

Using data subsets for each of our major stressor categories, we first fit multi-level meta-analysis (MLMA) models (i.e., intercept-only models) with $SMD_{H}$, that included study, species, tissue type, and phylogeny as random effects to account for non-independence and identify sources of variability. Given *metafor* does not estimate a residual variance by default we also included an observation-level random effect in our models. The size of datasets varied in the number of species and tissues (@tbl-heterogeneity). As such, we simplified the random effect structure for some datasets; including only random effects with six or more levels. Our MLMA models allowed us to partition variation in $SMD_{H}$ among these key sources while accounting for total sampling variance. We took a pluralistic approach to heterogeneity reporting, by reporting absolute ($\sigma^2$), relative (i.e., $I_{total}^2$, *sensu* @Nakagawa2012-oc; @Noble2022-ty) and magnitude measures (both $CV_{total}$ and $M_{total}$) of heterogeneity  as suggested by @Yang2023. We also report each of their stratified versions for each random effect level [@Nakagawa2012-oc; @Yang2023]. We also present 95% prediction intervals which describe the expected distribution of effects that are expected from future studies [@Nakagawa2021-ls; @Noble2022-ty].

A phylogeny was derived by first cross-checking taxa names using the Open Tree of Life (OTL) with the *rotl* package in R (vers. `r utils::packageVersion("rotl")`) [@Michonneau2016-if], and plotting taxa using *ggtree* to visualize the tree (vers. `r utils::packageVersion("ggtree")`) [@Yu2017-wj]. We resolved any taxa names that were outdated or changed. Once names in the dataset and *rotl* database matched we exported species names and built a time calibrated phylogeny for the species in our dataset using TimeTree [timetree.org;  @kumar2022timetree]. We used the R packages *ape* (vers. `r utils::packageVersion("ape")`) [@Paradis2019-gx] and *phytools* (vers. `r utils::packageVersion("phytools")`) [@Revell2012-vq] to prune the tree for individual analyses and calculate phylogenetic correlation matrices used in meta-analytic models.

#### *Multi-level Meta-Regression (MLMR) Models*

After quantifying levels of heterogeneity in each of the different stressor datasets, we fit a series of multi-level meta-regression (MLMR) models to test our key questions. In all models, we included the same random effects as we used in our MLMA models, however, MLMR models differed in the moderators included because each stressor type had unique sources of heterogeneity that we expected would explain effect variance. A number of moderators were relevant to all stressor manipulation types and so were included in all models. These included: 1) measurement trait category (i.e., antioxidants, oxidative damage etc.), 2) relative total duration of stressor manipulation, 3) 
We included relative total duration of stressor manipulation as a continuous moderator because we expected that longer durations of stressor manipulations would have larger impacts on mitochondrial function.
We also fit a model comparing stage of development (i.e., pre- or post-natal) as a categorical moderator  to test whether pre- or post-natal manipulations had larger impacts on mitochondrial function. However, this moderator did not show differences between pre- and post-natal manipulations, was not relevant for some manipulations (e.g., social deprivation because only one stage was manipulated), and was redundant with relative duration of stressor. As such, we include results and plots for this model in the supplementary materials [@fig-orchard_prepost].


# Results

```{r, mlma_models}
#| label: mlma_models
#| echo: false
#| warning: false
#| error: false

#### -------------------------------------------------- ####
# 1.            Multi-level Meta-analysis            
#### -------------------------------------------------- ####
  
  rerun = FALSE
  if(rerun){
    
    # Create list to store models
    MLMA_list <- list()
    
    for(i in 1:length(data_lists)){
      # Add observation level random effect
        data_lists[[i]]$obs <- 1:nrow(data_lists[[i]])

      # Prune the tree to relevant taxa contained within this dataset.
        tree_prune <- tree_checks(tree = phylo, dataCol = "species_phylo", data = data_lists[[i]], type ="prune")

      # Calculate the phylogenetic correlation matrix
        phylo_cor <- vcv(tree_prune, cor = TRUE)

      # Fit the MLMA model for each dataset. Vary random effects structure based on levels of the random effects in the dataset
     
      if(i == 2){
          MLMA_list[[i]] <- rma.mv(SMDH ~ 1, V = v_SMDH, 
                            random = list(~1| study, 
                                          ~1| obs),
                          test = "t",  
                          data = data_lists[[i]])
      } else {
          MLMA_list[[i]] <- rma.mv(SMDH ~ 1, V = v_SMDH, 
                            random = list(~1| study, 
                                          ~1| species_phylo,
                                          ~1| species_phylo2,
                                          ~1| tissue_sum,
                                          ~1| obs),
                            R = list(species_phylo = phylo_cor),
                          test = "t", 
                          data = data_lists[[i]])
      }
      
      # Add names to make sure we keep track of which dataset is which model                      
        names(MLMA_list)[i] <- names(data_lists)[i]
    }
      
    # Save the model
        saveRDS(MLMA_list, file = here("output", "models", "MLMA_list.rds"))

  } else {
        MLMA_list <- readRDS(here("output", "models", "MLMA_list.rds"))
  }

# RVE to check robustness of results
  robust_list <- lapply(MLMA_list, function(x) robust(x, cluster = x$data[,"study"]))
```

```{r, tbl-heterogeneity}
#| label: tbl-heterogeneity
#| tbl-cap: "Heterogeneity estimates for developmental stressor datasets"
#| echo: false
#| warning: false
#| error: false

#### -------------------------------------------------- ####
# 2.            Heterogeneity and Prediction Intervals
#### -------------------------------------------------- ####

  # Create k and n columns for sample sizes
  size  <- data.frame(do.call("rbind", lapply(data_lists, function (x) x  %>% summarise(k = n(), species = n_distinct(species_phylo), study = n_distinct(study)))))
  
  # Create table of I2 Total and I2 for each level
  i2  <- data.frame(do.call("rbind", lapply(MLMA_list, function (x) orchaRd::i2_ml(x))))
  i2  <- cbind(size, i2)
i2$Stressor <- c("Corticosterone", "Social Deprevation", "Disturbance", "Nutrition")
i2  <- i2  %>% select(Stressor, everything())
i2[2,7:9] <- NA # Social deprivation does not have phylogeny or species phylo2 random effects
eq  <- c(
  "Stressor",
  "n_{effects}",
  "n_{species}",
  "n_{study}",
  "I^2_{total} (\\%)",
  "I^2_{study} (\\%)",
  "I^2_{phylogeny} (\\%)",
  "I^2_{species} (\\%)",
  "I^2_{tissue} (\\%)",
  "I^2_{obs} (\\%)"
)

flextable(round_df(i2, digits = 3))  %>% compose(part = "header", value = as_paragraph(as_equation(eq))) %>% 
  width(j = c(1:10), width = c(1.5, rep(0.65, 9)))  %>%  compose(j = 7:9, i = 2, value = as_paragraph("–"))
```

```{r, fig-phylo}
#| label: fig-phylo
#| echo: false
#| warning: false
#| error: false
#| fig-cap: "Phylogeny of species included in the meta-analysis."
  
  phylo$tip.label <- gsub("_", " ", phylo$tip.label)

  fig_phylo <- ggtree(phylo, layout = "rectangular", branch.length = "none") + 
    geom_tiplab(size = 4, offset = 7, hjust = 1, align = FALSE, fontface = "italic") + 
    theme_tree2() + labs(x = "Millions of Years (MY)") +
    theme(legend.position = "none") 

    ggsave(filename = here("output", "figures", "phylo.png"), fig_phylo, width = 6, height = 9)

  p_phylo <- image_read(here("output", "figures", "phylo.png"))
  p_phylo

```

```{r, measure_category}
#| label: measure_category
#| echo: false
#| warning: false
#| error: false

#### -------------------------------------------------- ####
# 1.1           Measurement category
#### -------------------------------------------------- ####
  
  rerun = FALSE
  if(rerun){
    
    # Create list to store models
    MLMR_list_Measure <- list()
    
    for(i in 1:length(data_lists)){
      # Add observation level random effect
        data_lists[[i]]$obs <- 1:nrow(data_lists[[i]])

      # Prune the tree to relevant taxa contained within this dataset.
        tree_prune <- tree_checks(tree = phylo, dataCol = "species_phylo", data = data_lists[[i]], type ="prune")

      # Calculate the phylogenetic correlation matrix
        phylo_cor <- vcv(tree_prune, cor = TRUE)

      # # Fit the MLMR model for each dataset comparing pre vs postnatal 
     
      if(i == 2){
          MLMR_list_Measure[[i]] <- rma.mv(SMDH ~ measurement_category, V = v_SMDH, 
                            random = list(~1| study, 
                                          ~1| obs),
                          test = "t",  
                          data = data_lists[[i]])
      } else {
          MLMR_list_Measure[[i]] <- rma.mv(SMDH ~ measurement_category, V = v_SMDH, 
                            random = list(~1| study, 
                                          ~1| species_phylo,
                                          ~1| species_phylo2,
                                          ~1| tissue_sum,
                                          ~1| obs),
                            R = list(species_phylo = phylo_cor),
                          test = "t", 
                          data = data_lists[[i]])
      }
      
      # Add names to make sure we keep track of which dataset is which model                      
        names(MLMR_list_Measure)[i] <- names(data_lists)[i]
    }
      
    # Save the model
        saveRDS(MLMR_list_Measure, file = here("output", "models", "MLMR_list_Measure.rds"))

  } else {
        MLMR_list_Measure <- readRDS(here("output", "models", "MLMR_list_Measure.rds"))
  }

# RVE to check robustness of results
  robust_measure <- lapply(MLMR_list_Measure, function(x) robust(x, cluster = x$data[,"study"]))
```

```{r, RelDur}
#| label: RelDur
#| echo: false
#| warning: false
#| error: false

#### -------------------------------------------------- ####
# 1.3   Relative total duration of development stressor 
#### -------------------------------------------------- ####

rerun = FALSE
  if(rerun){
    
    # Create list to store models
    MLMR_list_RelDur <- list()
    
    for(i in 1:length(data_lists)){
      # Add observation level random effect
        data_lists[[i]]$obs <- 1:nrow(data_lists[[i]])

      # Prune the tree to relevant taxa contained within this dataset.
        tree_prune <- tree_checks(tree = phylo, dataCol = "species_phylo", data = data_lists[[i]], type ="prune")

      # Calculate the phylogenetic correlation matrix
        phylo_cor <- vcv(tree_prune, cor = TRUE)

      # # Fit the MLMR model for each dataset comparing pre vs postnatal 
     
      if(i == 2){
          MLMR_list_RelDur[[i]] <- rma.mv(SMDH ~ relative_total_duration, V = v_SMDH, 
                            random = list(~1| study, 
                                          ~1| obs),
                          test = "t",  
                          data = data_lists[[i]])
      } else {
          MLMR_list_RelDur[[i]] <- rma.mv(SMDH ~ relative_total_duration, V = v_SMDH, 
                            random = list(~1| study, 
                                          ~1| species_phylo,
                                          ~1| species_phylo2,
                                          ~1| tissue_sum,
                                          ~1| obs),
                            R = list(species_phylo = phylo_cor),
                          test = "t", 
                          data = data_lists[[i]])
      }
      
      # Add names to make sure we keep track of which dataset is which model                      
        names(MLMR_list_RelDur)[i] <- names(data_lists)[i]
    }
      
    # Save the model
        saveRDS(MLMR_list_RelDur, file = here("output", "models", "MLMR_list_RelDur.rds"))

  } else {
        MLMR_list_RelDur <- readRDS(here("output", "models", "MLMR_list_RelDur.rds"))
  }


  # RVE to check robustness of results
  robust_RelDur <- lapply(MLMR_list_RelDur, function(x) robust(x, cluster = x$data[,"study"]))
```



```{r, taxa}
#| label: taxa
#| echo: false
#| warning: false
#| error: false

#### -------------------------------------------------- ####
# 1.3   Taxa 
#### -------------------------------------------------- ####

rerun = FALSE
  if(rerun){
    
    # Create list to store models
    MLMR_list_taxa <- list()
    
    for(i in 1:length(data_lists)){
      # Add observation level random effect
        data_lists[[i]]$obs <- 1:nrow(data_lists[[i]])

      # Prune the tree to relevant taxa contained within this dataset.
        tree_prune <- tree_checks(tree = phylo, dataCol = "species_phylo", data = data_lists[[i]], type ="prune")

      # Calculate the phylogenetic correlation matrix
        phylo_cor <- vcv(tree_prune, cor = TRUE)

      # # Fit the MLMR model for each dataset but note that social deprivation only has one level for class so cannot fit this model
     
      if(i %in% c(1, 3,4)){
          MLMR_list_taxa[[i]] <- rma.mv(SMDH ~ class, V = v_SMDH, 
                            random = list(~1| study, 
                                          ~1| species_phylo,
                                          ~1| species_phylo2,
                                          ~1| tissue_sum,
                                          ~1| obs),
                            R = list(species_phylo = phylo_cor),
                          test = "t", 
                          data = data_lists[[i]])
        # Add names to make sure we keep track of which dataset is which model                      
        names(MLMR_list_taxa)[i] <- names(data_lists)[i]
      }
  
    }
      
    # Save the model
        saveRDS(MLMR_list_taxa, file = here("output", "models", "MLMR_list_taxa.rds"))

  } else {
        MLMR_list_taxa <- readRDS(here("output", "models", "MLMR_list_taxa.rds"))
  }


  # RVE to check robustness of results
  robust_taxa <- lapply(MLMR_list_taxa[c(1,3,4)], function(x) robust(x, cluster = x$data[,"study"]))
```



In total, we collected data from `r sum(i2$k)` effect sizes across 42 species (@fig-phylo) and 123 studies across the different stressors (@tbl-heterogeneity). 

## Corticosterone developmental impacts on mitochondrial function

Overall, exposure to corticosterone during development had a positive, but non-significant, impact on mitochondrial function ($SMD_{H}$ = `r coef(summary_list[[1]])$estimate`, 95% CI = `r coef(summary_list[[1]])$ci.lb` to `r coef(summary_list[[1]])$ci.ub`, $p$ = `r coef(summary_list[[1]])$pval`; [@fig-orchard_int]a). However, effect heterogeneity was high (95% Prediction Intervals: `r predict(summary_list[[1]])$pi.lb` to `r predict(summary_list[[1]])$pi.ub`; @tbl-heterogeneity), with `r i2[1,"I2_study"]`% of variation being driven by the type of tissue measured ($I^2_{study}$; @tbl-heterogeneity) with little to no variation explained by species/phylogeny and very small amount of between tissue variation (@tbl-heterogeneity). 

## Social deprivation developmental impacts on mitochondrial function
Social deprivation during development had a negative impact on mitochondrial function ($SMD_{H}$ = `r coef(summary_list[[2]])$estimate`, 95% CI = `r coef(summary_list[[2]])$ci.lb` to `r coef(summary_list[[2]])$ci.ub`, $p$ = `r coef(summary_list[[2]])$pval`; [@fig-orchard_int]b). Effect heterogeneity was again high (95% Prediction Intervals: `r predict(summary_list[[2]])$pi.lb` to `r predict(summary_list[[2]])$pi.ub`; @tbl-heterogeneity), with only a small amount of variation across studies ($I^2_{study}$ = `r i2[2,"I2_study"]`%) and little to no variation explained by species/phylogeny or tissue (@tbl-heterogeneity). 

## Disturbance developmental impacts on mitochondrial function

Disturbance during development had a positive impact on mitochondrial function ($SMD_{H}$ = `r coef(summary_list[[3]])$estimate`, 95% CI = `r coef(summary_list[[3]])$ci.lb` to `r coef(summary_list[[3]])$ci.ub`, $p$ = `r coef(summary_list[[3]])$pval`; [@fig-orchard_int]c). Effect heterogeneity was high (95% Prediction Intervals: `r predict(summary_list[[3]])$pi.lb` to `r predict(summary_list[[3]])$pi.ub`; @tbl-heterogeneity), with a moderate amount of variation being driven by differences between studies ($I^2_{study}$ = `r i2[3,"I2_study"]`%)(@tbl-heterogeneity).

## Nutrition developmental impacts on mitochondrial function
Nutritional stress during development also had limited impact on mitochondrial function overall ($SMD_{H}$ = `r coef(summary_list[[4]])$estimate`, 95% CI = `r coef(summary_list[[4]])$ci.lb` to `r coef(summary_list[[4]])$ci.ub`, $p$ = `r coef(summary_list[[4]])$pval`; [@fig-orchard_int]d), but as expected, effect heterogeneity was high (95% Prediction Intervals: `r predict(summary_list[[4]])$pi.lb` to `r predict(summary_list[[4]])$pi.ub`; @tbl-heterogeneity), with a moderate amount of variation being driven by differences between studies ($I^2_{study}$ = `r i2[4,"I2_study"]`%; @tbl-heterogeneity).

```{r, fig-orchard_int}
#| label: fig-orchard_int
#| echo: false
#| warning: false
#| error: false
#| fig-cap: "Orchard plots showing the overall meta-analytic mean effect size and 95% prediction intervals for each stressor category."
  
    plots  <- lapply(MLMA_list, function(x) orchard_plot(x, xlab = TeX("$SMD_{H}$"), group = "study", trunk.size = 1.2, branch.size = 2) +  
                                                ylim(-10,10) + scale_x_discrete(labels = "Overall") +
                                                theme_classic() + theme(legend.position = "top",
                                                                        axis.title = element_text(size = 18),
                                                                        axis.text = element_text(size = 12),
                                                                        plot.tag = element_text(size = 24)) + scale_color_manual(values = "black") + scale_fill_manual(values = "gray"))


    p_overall <- (plots[[1]] + ggtitle("Corticosterone") + plots[[2]] + ggtitle("Social Deprivation")) / (plots[[3]] + ggtitle("Disturbance") + plots[[4]] + ggtitle("Nutrition")) + plot_annotation(tag_levels = "a", tag_suffix = ")") 
    ggsave(here("output", "figures", "fig1.png"), p_overall, width = 8.6, height = 11)

    p_overall <- image_read(here("output", "figures", "fig1.png"))
    p_overall
```

```{r, fig-orchard_measure}
#| label: fig-orchard_measure
#| echo: false
#| warning: false
#| error: false
#| fig-cap: "Orchard plots showing the overall meta-analytic mean effect size and 95% prediction intervals for each stressor category for the different measurement types."
  
    plots  <- lapply(MLMR_list_Measure, function(x) orchard_plot(x, mod = "measurement_category", xlab = TeX("$SMD_{H}$"), group = "study", trunk.size = 1.2, branch.size = 2) +  ylim(-10,10) +                                              theme_classic() + theme(legend.position = "top", axis.title = element_text(size = 18),
                                                      axis.text = element_text(size = 12),
                                                       plot.tag = element_text(size = 24))) 
                                                                        #+ #scale_color_manual(values = "black") + #scale_fill_manual(values = "gray"))


    p_measure <- (plots[[1]] + ggtitle("Corticosterone") + plots[[2]] + ggtitle("Social Deprivation")) / (plots[[3]] + ggtitle("Disturbance") + plots[[4]] + ggtitle("Nutrition")) + plot_annotation(tag_levels = "a", tag_suffix = ")") 
    ggsave(here("output", "figures", "fig2.png"), p_measure, width = 8.6, height = 11)

    p_measure <- image_read(here("output", "figures", "fig2.png"))
    p_measure
```


# References

<br>

::: {#refs}
:::

<br>


# Supplementary Materials

```{r, prep_postnatal}
#| label: prep_postnatal
#| echo: false
#| warning: false
#| error: false 

#### -------------------------------------------------- ####
# 1.4   Pre vs Postnatal Stressor Comparison
#### -------------------------------------------------- ####

rerun = FALSE
  if(rerun){
    
    # Create list to store models
    MLMR_list_PrePost <- list()
    
    for(i in 1:length(data_lists)){
      # Add observation level random effect
        data_lists[[i]]$obs <- 1:nrow(data_lists[[i]])

      # Prune the tree to relevant taxa contained within this dataset.
        tree_prune <- tree_checks(tree = phylo, dataCol = "species_phylo", data = data_lists[[i]], type ="prune")

      # Calculate the phylogenetic correlation matrix
        phylo_cor <- vcv(tree_prune, cor = TRUE)

      # # Fit the MLMR model for each dataset comparing pre vs postnatal. Note that ONLY one level for stage in the social deprivation dataset so cannot fit this model
     
      if(i %in% c(1, 3,4)){

          MLMR_list_PrePost[[i]] <- rma.mv(SMDH ~ stage, V = v_SMDH, 
                            random = list(~1| study, 
                                          ~1| species_phylo,
                                          ~1| species_phylo2,
                                          ~1| tissue_sum,
                                          ~1| obs),
                            R = list(species_phylo = phylo_cor),
                          test = "t", 
                          data = data_lists[[i]])
        # Add names to make sure we keep track of which dataset is which model                      
        names(MLMR_list_PrePost)[i] <- names(data_lists)[i]
      }
      
    }
      
    # Save the model
        saveRDS(MLMR_list_PrePost, file = here("output", "models", "MLMR_list_PrePost.rds"))

  } else {
        MLMR_list_PrePost <- readRDS(here("output", "models", "MLMR_list_PrePost.rds"))
  }

# RVE to check robustness of results
  robust_Prepost <- lapply(MLMR_list_PrePost[c(1,3,4)], function(x) robust(x, cluster = x$data[,"study"]))
```


```{r, fig-orchard_prepost}
#| label: fig-orchard_prepost
#| echo: false
#| warning: false
#| error: false
#| fig-cap: "Orchard plots showing the overall meta-analytic mean effect size and 95% prediction intervals for each stressor category for pre-natal versus postnatal manipulations."
  
    plots  <- lapply(MLMR_list_PrePost[c(1,3,4)], function(x) orchard_plot(x, mod = "stage", xlab = TeX("$SMD_{H}$"), group = "study", trunk.size = 1.2, branch.size = 2) +  ylim(-10,10) +                                              theme_classic() + theme(legend.position = "top", axis.title = element_text(size = 18),
                                                      axis.text = element_text(size = 12),
                                                       plot.tag = element_text(size = 24))) 
                                                                        #+ #scale_color_manual(values = "black") + #scale_fill_manual(values = "gray"))


    p_prepost <- (plots[[1]] + ggtitle("Corticosterone") + plots[[3]] + ggtitle("Disturbance") + plots[[3]] + ggtitle("Nutrition")) + plot_annotation(tag_levels = "a", tag_suffix = ")") 
    ggsave(here("output", "figures", "fig3.png"), p_prepost, width = 8.6, height = 11)

    p_prepost <- image_read(here("output", "figures", "fig3.png"))
    p_prepost
```
